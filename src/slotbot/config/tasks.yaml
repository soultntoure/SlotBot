#src/slotbot/config/tasks.yaml
parse_user_input:
  description: >
    Analyze the user's message {user_message} to understand the primary intent and extract relevant entities.
    Today's date is {current_date}. You MUST use this to resolve any relative time expressions (e.g., 'tomorrow', 'next Wednesday').
    Follow these rules carefully:
    1.  **Determine Intent:** First, identify the user's core intent: 'book', 'cancel', or 'check_availability'.
    2.  **Handle 'book' or 'cancel' Intents:** 
        - If the intent is to book or cancel, you MUST extract or infer a specific `start_time`.
        **CRITICAL CALCULATION:** After determining the `start_time`, and if the end_time wasnt given by the user, you MUST CALCULATE the `end_time`. The end_time is exactly 60 minutes after the start_time.
        - If the user provides a relative time, convert it to an absolute ISO datetime format.
        - The `patient_email` is REQUIRED for these intents. If it is not in the message, you MUST add 'patient_email' to the `missing_info` list.
    3.  **Handle 'check_availability' Intent:**
        - If the user is asking about free times (e.g., 'are you free next week?', 'what about evenings?'), set the intent to 'check_availability'.
        - For these queries, do NOT invent a specific `start_time`. Instead, capture the user's time description (e.g., 'next week', 'evenings on weekdays') and put it in the `temporal_expression` field.
        - The `patient_email` is OPTIONAL for this intent.
    4.  **Extract User Info:** If an email is provided in any context, populate `patient_email`.
  agent: nlp_parser
  expected_output: >
    A JSON object matching the UserInputParsed schema.
  agent: nlp_parser
  output_file: 'outputs/parsed_user_input.json'



validate_session_state:
  description: >
    Check the parsed user input for the `patient_email` field:
      - If `patient_email` is null or missing, set identity_status to 'unknown'.
      - If `patient_email` is present, set identity_status to 'known'.

    Required fields in order to proceed with calendar operations:
      - `start_time`
      - `end_time`
      - `patient_email`
    Determine:
      - If all required fields are present, set info_completeness_status to 'complete'.
      - If any required fields are missing, set info_completeness_status to 'incomplete'.
    Prepare:
      - next_action: 'collect_info' if info_completeness_status is incomplete, otherwise 'execute_operation'.
      - missing_info: List of any missing required fields.

  expected_output: >
    A session state object indicating:
    - identity_status: known/unknown
    - info_completeness_status: complete/incomplete
    - missing_fields: List of missing required fields
    - next_action: collect_info/execute_operation
    - missing_info: List of any additional information needed from the user
  agent: session_manager
  context:
    - parse_user_input
  output_file: 'outputs/session_state.json'


collect_missing_information:
  description: >
    Generate clear, concise questions to collect any missing information identified in the previous step.
    For each item in the `missing_info` list, create a separate, user-friendly prompt 
    that asks for the specific detail (e.g., "Could you please provide your email address?" or "What time would you like to book your appointment?"). 
    Ensure the questions are polite, direct, and easy to understand. 
    If multiple pieces of information are missing ask in a single message, e.g., "Could you please provide your email address and the time you would like to book your appointment?".
  expected_output: >
    User-friendly questions or prompts to collect the missing information,
    formatted as natural conversation with clear instructions.
  agent: response_agent
  context:
    - validate_session_state
  output_file: 'outputs/missing_information_questions.json'


book_appointment:
  description: >
    Book an appointment for the user based on the provided date, time, and email details extracted from the parsed user input.
    Use the information in the parsed user input to schedule the appointment in the calendar system.
    You MUST use the BookAppointmentTool to perform the booking operation.
    If the requested slot is available, confirm the booking; otherwise, indicate failure and provide a reason.
  expected_output: >
    A structured output containing:
    - status: booked or failed
    - confirmation_details: Details of the booked appointment if successful
    - failure_reason: Explanation if booking could not be completed
  agent: calendar_manager
  context:
    - parse_user_input
    - validate_session_state


format_user_response:
  description: >
    Format the output from previous tasks into a clear, friendly message for the user.
  expected_output: >
    A polished, user-facing response that clearly communicates the results
    or next steps in natural, conversational language that is easy to understand.
  agent: response_agent
  context:
    - parse_user_input
    - book_appointment
    - validate_session_state
    - collect_missing_information