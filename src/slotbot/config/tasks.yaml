#src/slotbot/config/tasks.yaml
parse_user_input:
  description: >
    Analyze the user's message {user_message} to understand the primary intent and extract relevant entities.
    Today's date is {current_date}. You MUST use this to resolve any relative time expressions (e.g., 'tomorrow', 'next Wednesday').
    Follow these rules carefully:
    1.  **Determine Intent:** First, identify the user's core intent: 'book', 'cancel', or 'check_availability'.
    2.  **Handle 'book' or 'cancel' Intents:** 
        - If the intent is to book or cancel, you MUST extract or infer a specific `start_time`.
        **CRITICAL CALCULATION:** After determining the `start_time`, and if the end_time wasnt given by the user, you MUST CALCULATE the `end_time`. The end_time is exactly 60 minutes after the start_time.
        - If the user provides a relative time, convert it to an absolute ISO datetime format.
        - The `patient_email` is REQUIRED for these intents. If it is not in the message, you MUST add 'patient_email' to the `missing_info` list.
    3.  **Handle 'check_availability' Intent:**
        - If the user asks about a specific time (e.g., 'are you free tomorrow at 5 pm?'), you MUST parse this into a `start_time`.
        - If the user asks a general question about time (e.g., 'what about evenings?', 'any time next week?'), capture this in the `temporal_expression` field and leave `start_time` as null.
        - The `patient_email` is OPTIONAL for this intent.
    4.  **Extract User Info:** If an email is provided in any context, populate `patient_email`.
  agent: nlp_parser
  expected_output: >
    A JSON object matching the UserInputParsed schema.
  agent: nlp_parser
  output_file: 'outputs/parsed_user_input.json'



validate_session_state:
  description: >
    Act as a central router by analyzing the parsed user input and determining the next step.
    The user's intent is the primary driver for your decision.

    1.  **Analyze User Identity:**
        - If `patient_email` is present, set `identity_status` to 'known'.
        - Otherwise, set `identity_status` to 'unknown'.

    2.  **Determine Next Action based on Intent:**
        - **If intent is 'check_availability':**
          - If `start_time` is present, the next action is `check_availability`. Set `info_completeness_status` to 'complete'.
          - If `start_time` is missing (i.e., a general query like 'are you free?'), the next action is `collect_info`. Set `info_completeness_status` to 'incomplete' and add 'start_time' to `missing_info`.
        - **If intent is 'book' or 'cancel':**
          - Check for required fields: `start_time`, `end_time`, `patient_email`.
          - If all are present, the next action is `execute_operation`. Set `info_completeness_status` to 'complete'.
          - If any are missing, the next action is `collect_info`. Set `info_completeness_status` to 'incomplete' and list the missing fields in `missing_info`.
        - **For any other intent:**
          - Default to `collect_info` to clarify the user's needs.

    3.  **Final Output:**
        - Your output MUST be a session state object containing `identity_status`, `info_completeness_status`, `missing_info`, and the crucial `next_action` field.

  expected_output: >
    A session state object indicating:
    - identity_status: known/unknown
    - info_completeness_status: complete/incomplete
    - missing_fields: List of missing required fields
    - next_action: collect_info/execute_operation
    - missing_info: List of any additional information needed from the user
  agent: session_manager
  context:
    - parse_user_input
  output_file: 'outputs/session_state.json'


collect_missing_information:
  description: >
    Generate clear, concise questions to collect any missing information identified in the previous step.
    For each item in the `missing_info` list, create a separate, user-friendly prompt 
    that asks for the specific detail (e.g., "Could you please provide your email address?" or "What time would you like to book your appointment?"). 
    Ensure the questions are polite, direct, and easy to understand. 
    If multiple pieces of information are missing ask in a single message, e.g., "Could you please provide your email address and the time you would like to book your appointment?".
  expected_output: >
    User-friendly questions or prompts to collect the missing information,
    formatted as natural conversation with clear instructions.
  agent: response_agent
  context:
    - validate_session_state
  output_file: 'outputs/missing_information_questions.json'


execute_calendar_action:
  description: >
    Execute the appropriate calendar action based on the `next_action` provided by the session state.
    You have two tools available: `CheckAvailabilityTool` and `BookAppointmentTool`.

    - **If `next_action` is 'check_availability':**
      - Use the `CheckAvailabilityTool`.
      - You MUST extract the `date` and `time` from the `start_time` field of the parsed user input.
      - For example, from '2025-07-18T17:00:00', you must extract `date='2025-07-18'` and `time='17:00'`.

    - **If `next_action` is 'execute_operation':**
      - Use the `BookAppointmentTool`.
      - You MUST extract the `date`, `time`, and `patient_email` from the parsed user input.

  expected_output: >
    A JSON object confirming the action taken. For availability checks, it should include the status ('free' or 'busy'). For bookings, it should include the booking status ('booked' or 'failed').
  agent: calendar_manager
  context:
    - parse_user_input
    - validate_session_state


format_user_response:
  description: >
    Format the output from previous tasks into a clear, friendly message for the user.
    - If the output from `execute_calendar_action` indicates an availability check, inform the user if the slot is 'free' or 'busy'. If free, ask if they would like to book it.
    - If the output from `execute_calendar_action` indicates a booking, confirm if it was 'booked' or 'failed'.
    - If the output from `collect_missing_information` is present, relay the request for more information clearly.
  expected_output: >
    A polished, user-facing response that clearly communicates the results or next steps in natural, conversational language.
  agent: response_agent
  context:
    - execute_calendar_action
    - collect_missing_information
